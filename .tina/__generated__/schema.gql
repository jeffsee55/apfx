# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  localeInfo(relativePath: String): LocaleInfo!
  localeInfoConnection(before: String, after: String, first: Float, last: Float, sort: String): LocaleInfoConnection!
  news(relativePath: String): News!
  newsConnection(before: String, after: String, first: Float, last: Float, sort: String): NewsConnection!
  footer(relativePath: String): Footer!
  footerConnection(before: String, after: String, first: Float, last: Float, sort: String): FooterConnection!
  theme(relativePath: String): Theme!
  themeConnection(before: String, after: String, first: Float, last: Float, sort: String): ThemeConnection!
  navigation(relativePath: String): Navigation!
  navigationConnection(before: String, after: String, first: Float, last: Float, sort: String): NavigationConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String): PageConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = LocaleInfo | News | Footer | Theme | Navigation | Page

type LocaleInfoAu {
  tel: String
  signUpLink: String
  signUpLinkPersonal: String
  signInLink: String
}

type LocaleInfoUs {
  tel: String
  signUpLink: String
  signUpLinkPersonal: String
  signInLink: String
}

type LocaleInfoGb {
  tel: String
  signUpLink: String
  signUpLinkPersonal: String
  signInLink: String
}

type LocaleInfo implements Node & Document {
  au: LocaleInfoAu
  us: LocaleInfoUs
  gb: LocaleInfoGb
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type LocaleInfoConnectionEdges {
  cursor: String!
  node: LocaleInfo
}

type LocaleInfoConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [LocaleInfoConnectionEdges]
}

type News implements Node & Document {
  title: String!
  subTitle: String
  image: String
  publishDate: String
  category: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type NewsConnectionEdges {
  cursor: String!
  node: News
}

type NewsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NewsConnectionEdges]
}

type FooterOffices {
  location: String!
  address: String!
  phone: String!
}

type FooterDisclaimers {
  body: JSON
}

type Footer implements Node & Document {
  offices: [FooterOffices]
  disclaimers: [FooterDisclaimers]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type FooterConnectionEdges {
  cursor: String!
  node: Footer
}

type FooterConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FooterConnectionEdges]
}

type Theme implements Node & Document {
  displayFont: String
  colorMode: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type ThemeConnectionEdges {
  cursor: String!
  node: Theme
}

type ThemeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ThemeConnectionEdges]
}

union NavigationItemsPage = Page

type NavigationItems {
  page: NavigationItemsPage
}

type Navigation implements Node & Document {
  items: [NavigationItems]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type NavigationConnectionEdges {
  cursor: String!
  node: Navigation
}

type NavigationConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavigationConnectionEdges]
}

type PageSeo {
  title: String
  image: String
  description: String!
}

union PageBlocksNewsNewsItemsArticle = News

type PageBlocksNewsNewsItems {
  article: PageBlocksNewsNewsItemsArticle!
}

type PageBlocksNews {
  title: String!
  subTitle: String
  description: JSON!
  newsItems: [PageBlocksNewsNewsItems!]!
}

type PageBlocksStatsWithImageStats {
  title: String!
  subTitle: String
  description: JSON!
}

type PageBlocksStatsWithImage {
  title: String!
  subTitle: String
  description: JSON!
  image: String
  stats: [PageBlocksStatsWithImageStats]
}

type PageBlocksHeroAction {
  callToAction: String
  linkText: String
  link: String
  linkOverride: String
  secondaryText: String
  secondaryLink: String
  secondaryLinkOverride: String
}

type PageBlocksHero {
  title: String!
  subTitle: String
  description: JSON!
  image: String
  action: PageBlocksHeroAction
}

type PageBlocksSlideshowItemsAction {
  callToAction: String
  linkText: String
  link: String
  linkOverride: String
  secondaryText: String
  secondaryLink: String
  secondaryLinkOverride: String
}

type PageBlocksSlideshowItemsOverlay {
  image: String
  overlayColor: String
  overlayOpacity: String
}

type PageBlocksSlideshowItems {
  title: String!
  subTitle: String
  description: JSON!
  action: PageBlocksSlideshowItemsAction
  overlay: PageBlocksSlideshowItemsOverlay
}

type PageBlocksSlideshow {
  items: [PageBlocksSlideshowItems]
}

type PageBlocksComparisonTableItemsMetaA {
  aOne: String
}

type PageBlocksComparisonTableItemsMetaB {
  bOne: String
}

union PageBlocksComparisonTableItemsMeta = PageBlocksComparisonTableItemsMetaA | PageBlocksComparisonTableItemsMetaB

type PageBlocksComparisonTableItems {
  title: String!
  subTitle: String
  description: JSON!
  bulletPoints: [String]
  meta: [PageBlocksComparisonTableItemsMeta]
}

type PageBlocksComparisonTableAction {
  callToAction: String
  linkText: String
  link: String
  linkOverride: String
  secondaryText: String
  secondaryLink: String
  secondaryLinkOverride: String
}

type PageBlocksComparisonTable {
  title: String!
  subTitle: String
  description: JSON!
  items: [PageBlocksComparisonTableItems]
  action: PageBlocksComparisonTableAction
}

type PageBlocksFeatureFeatures {
  icon: String!
  name: String!
  description: JSON!
}

type PageBlocksFeatureOverlay {
  image: String
  overlayColor: String
  overlayOpacity: String
}

type PageBlocksFeature {
  title: String!
  subTitle: String
  description: JSON!
  featureStyle: String
  features: [PageBlocksFeatureFeatures!]!
  overlay: PageBlocksFeatureOverlay
}

type PageBlocksFullScreenLogoOverlay {
  image: String
  overlayColor: String
  overlayOpacity: String
}

type PageBlocksFullScreenLogo {
  slogan: String
  link: String
  overlay: PageBlocksFullScreenLogoOverlay
}

type PageBlocksFullScreenHeaderAction {
  callToAction: String
  linkText: String
  link: String
  linkOverride: String
  secondaryText: String
  secondaryLink: String
  secondaryLinkOverride: String
}

type PageBlocksFullScreenHeaderOverlay {
  image: String
  overlayColor: String
  overlayOpacity: String
}

type PageBlocksFullScreenHeader {
  title: String!
  subTitle: String
  description: JSON!
  action: PageBlocksFullScreenHeaderAction
  overlay: PageBlocksFullScreenHeaderOverlay
}

union PageBlocks = PageBlocksNews | PageBlocksStatsWithImage | PageBlocksHero | PageBlocksSlideshow | PageBlocksComparisonTable | PageBlocksFeature | PageBlocksFullScreenLogo | PageBlocksFullScreenHeader

type Page implements Node & Document {
  title: String!
  link: String!
  seo: PageSeo
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateLocaleInfo(relativePath: String!, params: LocaleInfoMutation!): LocaleInfo!
  createLocaleInfo(relativePath: String!, params: LocaleInfoMutation!): LocaleInfo!
  updateNews(relativePath: String!, params: NewsMutation!): News!
  createNews(relativePath: String!, params: NewsMutation!): News!
  updateFooter(relativePath: String!, params: FooterMutation!): Footer!
  createFooter(relativePath: String!, params: FooterMutation!): Footer!
  updateTheme(relativePath: String!, params: ThemeMutation!): Theme!
  createTheme(relativePath: String!, params: ThemeMutation!): Theme!
  updateNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
  createNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentMutation {
  localeInfo: LocaleInfoMutation
  news: NewsMutation
  footer: FooterMutation
  theme: ThemeMutation
  navigation: NavigationMutation
  page: PageMutation
}

input LocaleInfoAuMutation {
  tel: String
  signUpLink: String
  signUpLinkPersonal: String
  signInLink: String
}

input LocaleInfoUsMutation {
  tel: String
  signUpLink: String
  signUpLinkPersonal: String
  signInLink: String
}

input LocaleInfoGbMutation {
  tel: String
  signUpLink: String
  signUpLinkPersonal: String
  signInLink: String
}

input LocaleInfoMutation {
  au: LocaleInfoAuMutation
  us: LocaleInfoUsMutation
  gb: LocaleInfoGbMutation
}

input NewsMutation {
  title: String
  subTitle: String
  image: String
  publishDate: String
  category: String
  body: JSON
}

input FooterOfficesMutation {
  location: String
  address: String
  phone: String
}

input FooterDisclaimersMutation {
  body: JSON
}

input FooterMutation {
  offices: [FooterOfficesMutation]
  disclaimers: [FooterDisclaimersMutation]
}

input ThemeMutation {
  displayFont: String
  colorMode: String
}

input NavigationItemsMutation {
  page: String
}

input NavigationMutation {
  items: [NavigationItemsMutation]
}

input PageSeoMutation {
  title: String
  image: String
  description: String
}

input PageBlocksNewsNewsItemsMutation {
  article: String
}

input PageBlocksNewsMutation {
  title: String
  subTitle: String
  description: JSON
  newsItems: [PageBlocksNewsNewsItemsMutation]
}

input PageBlocksStatsWithImageStatsMutation {
  title: String
  subTitle: String
  description: JSON
}

input PageBlocksStatsWithImageMutation {
  title: String
  subTitle: String
  description: JSON
  image: String
  stats: [PageBlocksStatsWithImageStatsMutation]
}

input PageBlocksHeroActionMutation {
  callToAction: String
  linkText: String
  link: String
  linkOverride: String
  secondaryText: String
  secondaryLink: String
  secondaryLinkOverride: String
}

input PageBlocksHeroMutation {
  title: String
  subTitle: String
  description: JSON
  image: String
  action: PageBlocksHeroActionMutation
}

input PageBlocksSlideshowItemsActionMutation {
  callToAction: String
  linkText: String
  link: String
  linkOverride: String
  secondaryText: String
  secondaryLink: String
  secondaryLinkOverride: String
}

input PageBlocksSlideshowItemsOverlayMutation {
  image: String
  overlayColor: String
  overlayOpacity: String
}

input PageBlocksSlideshowItemsMutation {
  title: String
  subTitle: String
  description: JSON
  action: PageBlocksSlideshowItemsActionMutation
  overlay: PageBlocksSlideshowItemsOverlayMutation
}

input PageBlocksSlideshowMutation {
  items: [PageBlocksSlideshowItemsMutation]
}

input PageBlocksComparisonTableItemsMetaAMutation {
  aOne: String
}

input PageBlocksComparisonTableItemsMetaBMutation {
  bOne: String
}

input PageBlocksComparisonTableItemsMetaMutation {
  a: PageBlocksComparisonTableItemsMetaAMutation
  b: PageBlocksComparisonTableItemsMetaBMutation
}

input PageBlocksComparisonTableItemsMutation {
  title: String
  subTitle: String
  description: JSON
  bulletPoints: [String]
  meta: [PageBlocksComparisonTableItemsMetaMutation]
}

input PageBlocksComparisonTableActionMutation {
  callToAction: String
  linkText: String
  link: String
  linkOverride: String
  secondaryText: String
  secondaryLink: String
  secondaryLinkOverride: String
}

input PageBlocksComparisonTableMutation {
  title: String
  subTitle: String
  description: JSON
  items: [PageBlocksComparisonTableItemsMutation]
  action: PageBlocksComparisonTableActionMutation
}

input PageBlocksFeatureFeaturesMutation {
  icon: String
  name: String
  description: JSON
}

input PageBlocksFeatureOverlayMutation {
  image: String
  overlayColor: String
  overlayOpacity: String
}

input PageBlocksFeatureMutation {
  title: String
  subTitle: String
  description: JSON
  featureStyle: String
  features: [PageBlocksFeatureFeaturesMutation]
  overlay: PageBlocksFeatureOverlayMutation
}

input PageBlocksFullScreenLogoOverlayMutation {
  image: String
  overlayColor: String
  overlayOpacity: String
}

input PageBlocksFullScreenLogoMutation {
  slogan: String
  link: String
  overlay: PageBlocksFullScreenLogoOverlayMutation
}

input PageBlocksFullScreenHeaderActionMutation {
  callToAction: String
  linkText: String
  link: String
  linkOverride: String
  secondaryText: String
  secondaryLink: String
  secondaryLinkOverride: String
}

input PageBlocksFullScreenHeaderOverlayMutation {
  image: String
  overlayColor: String
  overlayOpacity: String
}

input PageBlocksFullScreenHeaderMutation {
  title: String
  subTitle: String
  description: JSON
  action: PageBlocksFullScreenHeaderActionMutation
  overlay: PageBlocksFullScreenHeaderOverlayMutation
}

input PageBlocksMutation {
  news: PageBlocksNewsMutation
  statsWithImage: PageBlocksStatsWithImageMutation
  hero: PageBlocksHeroMutation
  slideshow: PageBlocksSlideshowMutation
  comparisonTable: PageBlocksComparisonTableMutation
  feature: PageBlocksFeatureMutation
  fullScreenLogo: PageBlocksFullScreenLogoMutation
  fullScreenHeader: PageBlocksFullScreenHeaderMutation
}

input PageMutation {
  title: String
  link: String
  seo: PageSeoMutation
  blocks: [PageBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  