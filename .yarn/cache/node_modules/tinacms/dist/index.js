var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("graphql"), require("lodash.set"), require("graphql-tag"), require("@tinacms/toolkit"), require("react"), require("styled-components"), require("yup"), require("final-form"), require("react-router-dom"), require("@headlessui/react")) : typeof define === "function" && define.amd ? define(["exports", "graphql", "lodash.set", "graphql-tag", "@tinacms/toolkit", "react", "styled-components", "yup", "final-form", "react-router-dom", "@headlessui/react"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.tinacms = {}, global.NOOP, global.NOOP, global.NOOP, global.NOOP, global.NOOP, global.NOOP, global.NOOP, global.NOOP, global.NOOP, global.NOOP));
})(this, function(exports2, graphql, set, gql$1, toolkit, React, styled, yup, finalForm, reactRouterDom, react) {
  "use strict";
  function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : { "default": e };
  }
  function _interopNamespace(e) {
    if (e && e.__esModule)
      return e;
    var n = { __proto__: null, [Symbol.toStringTag]: "Module" };
    if (e) {
      Object.keys(e).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function() {
              return e[k];
            }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }
  var set__default = /* @__PURE__ */ _interopDefaultLegacy(set);
  var gql__default = /* @__PURE__ */ _interopDefaultLegacy(gql$1);
  var React__default = /* @__PURE__ */ _interopDefaultLegacy(React);
  var styled__default = /* @__PURE__ */ _interopDefaultLegacy(styled);
  var yup__namespace = /* @__PURE__ */ _interopNamespace(yup);
  function popupWindow(url, title, window2, w, h) {
    const y = window2.top.outerHeight / 2 + window2.top.screenY - h / 2;
    const x = window2.top.outerWidth / 2 + window2.top.screenX - w / 2;
    return window2.open(url, title, "toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, copyhistory=no, width=" + w + ", height=" + h + ", top=" + y + ", left=" + x);
  }
  const TINA_LOGIN_EVENT = "tinaCloudLogin";
  const AUTH_TOKEN_KEY = "tinacms-auth";
  const authenticate = (clientId, frontendUrl) => {
    return new Promise((resolve) => {
      let authTab;
      window.addEventListener("message", function(e) {
        if (e.data.source === TINA_LOGIN_EVENT) {
          if (authTab) {
            authTab.close();
          }
          resolve({
            id_token: e.data.id_token,
            access_token: e.data.access_token,
            refresh_token: e.data.refresh_token
          });
        }
      });
      const origin = `${window.location.protocol}//${window.location.host}`;
      authTab = popupWindow(`${frontendUrl}/signin?clientId=${clientId}&origin=${origin}`, "_blank", window, 1e3, 700);
    });
  };
  const formify = (query, schema) => {
    const typeInfo = new graphql.TypeInfo(schema);
    const pathsToPopulate = [];
    const visitor = {
      leave(node, key, parent, path, ancestors) {
        const type = typeInfo.getType();
        if (type) {
          const namedType = graphql.getNamedType(type);
          if (namedType instanceof graphql.GraphQLObjectType) {
            const hasNodeInterface = !!namedType.getInterfaces().find((i) => i.name === "Node");
            if (hasNodeInterface) {
              if (typeof path[path.length - 1] === "number") {
                assertIsObjectType(namedType);
                const valuesNode = namedType.getFields().values;
                const namedValuesNode = graphql.getNamedType(valuesNode.type);
                const pathForValues = [...path];
                pathForValues.push("selectionSet");
                pathForValues.push("selections");
                const valuesAst = buildValuesForType(namedValuesNode);
                pathForValues.push(100);
                const formNode = namedType.getFields().form;
                const namedFormNode = graphql.getNamedType(formNode.type);
                const pathForForm = [...path];
                pathForForm.push("selectionSet");
                pathForForm.push("selections");
                const formAst = buildFormForType(namedFormNode);
                pathForForm.push(101);
                const sysNode = namedType.getFields().sys;
                const namedSysNode = graphql.getNamedType(sysNode.type);
                const pathForSys = [...path];
                pathForSys.push("selectionSet");
                pathForSys.push("selections");
                const sysAst = buildSysForType(namedSysNode);
                pathForSys.push(102);
                pathsToPopulate.push({
                  path: path.map((p) => p.toString()).join("-"),
                  paths: [
                    {
                      path: pathForValues.map((p) => p.toString()),
                      ast: valuesAst
                    },
                    {
                      path: pathForForm.map((p) => p.toString()),
                      ast: formAst
                    },
                    {
                      path: pathForSys.map((p) => p.toString()),
                      ast: sysAst
                    }
                  ]
                });
              }
            }
          }
        }
      }
    };
    graphql.visit(query, graphql.visitWithTypeInfo(typeInfo, visitor));
    const topLevelPaths = pathsToPopulate.filter((p, i) => {
      const otherPaths = pathsToPopulate.filter((_, index) => index !== i);
      const isChildOfOtherPaths = otherPaths.some((op) => {
        if (p.path.startsWith(op.path)) {
          return true;
        } else {
          return false;
        }
      });
      if (isChildOfOtherPaths) {
        return false;
      } else {
        return true;
      }
    });
    topLevelPaths.map((p) => {
      p.paths.map((pathNode) => {
        set__default["default"](query, pathNode.path, pathNode.ast);
      });
    });
    return query;
  };
  const buildSysForType = (type) => {
    assertIsObjectType(type);
    return {
      kind: "Field",
      alias: {
        kind: "Name",
        value: "_internalSys"
      },
      name: {
        kind: "Name",
        value: "sys"
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: buildSelectionsFields(Object.values(type.getFields()), (fields) => {
          return {
            continue: true,
            filteredFields: fields.filter((field) => field.name !== "documents")
          };
        })
      }
    };
  };
  const buildValuesForType = (type) => {
    try {
      assertIsUnionType(type);
      return {
        kind: "Field",
        name: {
          kind: "Name",
          value: "values"
        },
        selectionSet: {
          kind: "SelectionSet",
          selections: buildSelectionInlineFragments(type.getTypes())
        }
      };
    } catch (e) {
      return {
        kind: "Field",
        name: {
          kind: "Name",
          value: "values"
        }
      };
    }
  };
  const buildFormForType = (type) => {
    try {
      assertIsUnionType(type);
      return {
        kind: "Field",
        name: {
          kind: "Name",
          value: "form"
        },
        selectionSet: {
          kind: "SelectionSet",
          selections: buildSelectionInlineFragments(type.getTypes())
        }
      };
    } catch (e) {
      return {
        kind: "Field",
        name: {
          kind: "Name",
          value: "form"
        }
      };
    }
  };
  const buildSelectionInlineFragments = (types, callback) => {
    return types.map((type) => {
      return {
        kind: "InlineFragment",
        typeCondition: {
          kind: "NamedType",
          name: {
            kind: "Name",
            value: type.name
          }
        },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            ...Object.values(type.getFields()).map((field) => {
              const namedType = graphql.getNamedType(field.type);
              if (graphql.isLeafType(namedType)) {
                return {
                  kind: "Field",
                  name: {
                    kind: "Name",
                    value: field.name
                  }
                };
              } else if (namedType instanceof graphql.GraphQLUnionType) {
                return {
                  kind: "Field",
                  name: {
                    kind: "Name",
                    value: field.name
                  },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      ...buildSelectionInlineFragments(namedType.getTypes(), callback)
                    ]
                  }
                };
              } else if (namedType instanceof graphql.GraphQLObjectType) {
                return {
                  kind: "Field",
                  name: {
                    kind: "Name",
                    value: field.name
                  },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      ...buildSelectionsFields(Object.values(namedType.getFields()), callback)
                    ]
                  }
                };
              } else {
                throw new Error(`Unexpected GraphQL type for field ${namedType.name}`);
              }
            })
          ]
        }
      };
    });
  };
  const buildSelectionsFields = (fields, callback) => {
    let filteredFields = fields;
    if (callback) {
      const result = callback(fields);
      if (!result.continue) {
        if (fields.every((field) => {
          return !graphql.isScalarType(graphql.getNamedType(field.type));
        })) {
          return [
            {
              kind: "Field",
              name: {
                kind: "Name",
                value: "__typename"
              }
            }
          ];
        }
        return buildSelectionsFields(result.filteredFields.filter((field) => {
          if (graphql.isScalarType(graphql.getNamedType(field.type))) {
            return true;
          }
          return false;
        }));
      } else {
        filteredFields = result.filteredFields;
      }
    }
    return filteredFields.map((field) => {
      const namedType = graphql.getNamedType(field.type);
      if (graphql.isLeafType(namedType)) {
        return {
          kind: "Field",
          name: {
            kind: "Name",
            value: field.name
          }
        };
      } else if (namedType instanceof graphql.GraphQLUnionType) {
        return {
          kind: "Field",
          name: {
            kind: "Name",
            value: field.name
          },
          selectionSet: {
            kind: "SelectionSet",
            selections: [
              ...buildSelectionInlineFragments(namedType.getTypes(), callback)
            ]
          }
        };
      } else if (namedType instanceof graphql.GraphQLObjectType) {
        return {
          kind: "Field",
          name: {
            kind: "Name",
            value: field.name
          },
          selectionSet: {
            kind: "SelectionSet",
            selections: [
              ...buildSelectionsFields(Object.values(namedType.getFields()), callback)
            ]
          }
        };
      } else {
        return {
          kind: "Field",
          name: {
            kind: "Name",
            value: field.name
          },
          selectionSet: {
            kind: "SelectionSet",
            selections: []
          }
        };
      }
    });
  };
  function assertIsObjectType(type) {
    if (type instanceof graphql.GraphQLObjectType)
      ;
    else {
      throw new Error(`Expected an instance of GraphQLObjectType for type ${type.name}`);
    }
  }
  function assertIsUnionType(type) {
    if (type instanceof graphql.GraphQLUnionType)
      ;
    else {
      throw new Error(`Expected an instance of GraphQLUnionType for type ${type.name}`);
    }
  }
  class Client {
    constructor(_a) {
      var _b = _a, { tokenStorage = "MEMORY" } = _b, options = __objRest(_b, ["tokenStorage"]);
      this.addPendingContent = async (props) => {
        const mutation = `#graphql
mutation addPendingDocumentMutation(
  $relativePath: String!
  $collection: String!
  $template: String
) {
  addPendingDocument(
    relativePath: $relativePath
    template: $template
    collection: $collection
  ) {
    ... on Document {
      sys {
        relativePath
        path
        breadcrumbs
        collection {
          slug
        }
      }
    }
  }
}`;
        const result = await this.request(mutation, {
          variables: props
        });
        return result;
      };
      this.getSchema = async () => {
        if (!this.schema) {
          const data = await this.request(graphql.getIntrospectionQuery(), {
            variables: {}
          });
          this.schema = graphql.buildClientSchema(data);
        }
        return this.schema;
      };
      this.options = options;
      this.setBranch(options.branch);
      this.events = new toolkit.EventBus();
      this.events.subscribe("branch-switcher:change-branch", ({ branchName }) => {
        this.setBranch(branchName);
      });
      this.clientId = options.clientId;
      switch (tokenStorage) {
        case "LOCAL_STORAGE":
          this.getToken = function() {
            const tokens = localStorage.getItem(AUTH_TOKEN_KEY) || null;
            if (tokens) {
              return JSON.parse(tokens);
            } else {
              return {
                access_token: null,
                id_token: null,
                refresh_token: null
              };
            }
          };
          this.setToken = function(token) {
            localStorage.setItem(AUTH_TOKEN_KEY, JSON.stringify(token, null, 2));
          };
          break;
        case "MEMORY":
          this.getToken = () => {
            if (this.token) {
              return JSON.parse(this.token);
            } else {
              return {
                access_token: null,
                id_token: null,
                refresh_token: null
              };
            }
          };
          this.setToken = (token) => {
            this.token = JSON.stringify(token, null, 2);
          };
          break;
        case "CUSTOM":
          if (!options.getTokenFn) {
            throw new Error("When CUSTOM token storage is selected, a getTokenFn must be provided");
          }
          this.getToken = options.getTokenFn;
          break;
      }
    }
    setBranch(branchName) {
      var _a, _b, _c;
      const encodedBranch = encodeURIComponent(branchName);
      this.frontendUrl = ((_a = this.options.tinaioConfig) == null ? void 0 : _a.frontendUrlOverride) || "https://app.tina.io";
      this.identityApiUrl = ((_b = this.options.tinaioConfig) == null ? void 0 : _b.identityApiUrlOverride) || "https://identity.tinajs.io";
      const contentApiBase = ((_c = this.options.tinaioConfig) == null ? void 0 : _c.contentApiUrlOverride) || `https://content.tinajs.io`;
      this.contentApiUrl = this.options.customContentApiUrl || `${contentApiBase}/content/${this.options.clientId}/github/${encodedBranch}`;
    }
    async requestWithForm(query, { variables }) {
      const schema = await this.getSchema();
      const formifiedQuery = formify(query(gql__default["default"]), schema);
      return this.request(graphql.print(formifiedQuery), { variables });
    }
    async request(query, { variables }) {
      const res = await fetch(this.contentApiUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.getToken().id_token
        },
        body: JSON.stringify({
          query: typeof query === "function" ? graphql.print(query(gql__default["default"])) : query,
          variables
        })
      });
      const json = await res.json();
      if (json.errors) {
        throw new Error(`Unable to fetch, errors: 
	${json.errors.map((error) => error.message).join("\n")}`);
      }
      return json.data;
    }
    async isAuthorized() {
      return this.isAuthenticated();
    }
    async isAuthenticated() {
      return !!await this.getUser();
    }
    async authenticate() {
      const token = await authenticate(this.clientId, this.frontendUrl);
      this.setToken(token);
      return token;
    }
    async fetchWithToken(input, init) {
      const headers = (init == null ? void 0 : init.headers) || {};
      return await fetch(input, __spreadProps(__spreadValues({}, init), {
        headers: new Headers(__spreadValues({
          Authorization: "Bearer " + this.getToken().id_token
        }, headers))
      }));
    }
    async getUser() {
      if (!this.clientId) {
        return null;
      }
      const url = `${this.identityApiUrl}/v2/apps/${this.clientId}/currentUser`;
      try {
        const res = await this.fetchWithToken(url, {
          method: "GET"
        });
        const val = await res.json();
        if (!res.status.toString().startsWith("2")) {
          console.error(val.error);
          return null;
        }
        return val;
      } catch (e) {
        console.error(e);
        return null;
      }
    }
    async listBranches({ owner, repo }) {
      const url = `${this.contentApiUrl}/list_branches?owner=${owner}&repo=${repo}`;
      try {
        const res = await this.fetchWithToken(url, {
          method: "GET"
        });
        return JSON.stringify(res);
      } catch (e) {
        console.error("There was an issue fetching the branch list.", e);
        return null;
      }
    }
    async createBranch({ owner, repo, baseBranch, branchName }) {
      const url = `${this.contentApiUrl}/create_branch`;
      try {
        const res = await this.fetchWithToken(url, {
          method: "POST",
          body: {
            owner,
            repo,
            baseBranch,
            branchName
          }
        });
        return JSON.stringify(res);
      } catch (error) {
        console.error("There was an error creating a new branch.", error);
        return null;
      }
    }
  }
  const DEFAULT_LOCAL_TINA_GQL_SERVER_URL = "http://localhost:4001/graphql";
  class LocalClient extends Client {
    constructor(props) {
      const clientProps = {
        clientId: "",
        branch: "",
        customContentApiUrl: props && props.customContentApiUrl ? props.customContentApiUrl : DEFAULT_LOCAL_TINA_GQL_SERVER_URL
      };
      super(clientProps);
    }
    async isAuthorized() {
      return true;
    }
    async isAuthenticated() {
      return true;
    }
  }
  function ModalBuilder(modalProps) {
    return /* @__PURE__ */ React__default["default"].createElement(toolkit.StyleReset, null, /* @__PURE__ */ React__default["default"].createElement(toolkit.Modal, null, /* @__PURE__ */ React__default["default"].createElement(toolkit.ModalPopup, null, /* @__PURE__ */ React__default["default"].createElement(toolkit.ModalHeader, null, modalProps.title), /* @__PURE__ */ React__default["default"].createElement(toolkit.ModalBody, {
      padded: true
    }, /* @__PURE__ */ React__default["default"].createElement("p", null, modalProps.message), modalProps.error && /* @__PURE__ */ React__default["default"].createElement(ErrorLabel, null, modalProps.error)), /* @__PURE__ */ React__default["default"].createElement(toolkit.ModalActions, null, modalProps.actions.map((action) => /* @__PURE__ */ React__default["default"].createElement(AsyncButton, __spreadValues({
      key: action.name
    }, action)))))));
  }
  const ErrorLabel = styled__default["default"].p`
  color: var(--tina-color-error) !important;
`;
  const AsyncButton = ({ name, primary, action }) => {
    const [submitting, setSubmitting] = React.useState(false);
    const onClick = React.useCallback(async () => {
      setSubmitting(true);
      try {
        await action();
        setSubmitting(false);
      } catch (e) {
        setSubmitting(false);
        throw e;
      }
    }, [action, setSubmitting]);
    return /* @__PURE__ */ React__default["default"].createElement(toolkit.Button, {
      primary,
      onClick,
      busy: submitting,
      disabled: submitting
    }, submitting && /* @__PURE__ */ React__default["default"].createElement(toolkit.LoadingDots, null), !submitting && name);
  };
  const TINA_AUTH_CONFIG = "tina_auth_config";
  const useTinaAuthRedirect = () => {
    React.useEffect(() => {
      const urlParams = new URLSearchParams(window.location.search);
      const config = {
        code: urlParams.get("code") || "",
        scope: urlParams.get("scope") || "email",
        state: urlParams.get("state")
      };
      if (!config.code) {
        return;
      }
      localStorage[TINA_AUTH_CONFIG] = JSON.stringify(config);
    }, []);
  };
  const createClient = ({
    clientId,
    isLocalClient = true,
    branch,
    tinaioConfig
  }) => {
    return isLocalClient ? new LocalClient() : new Client({
      clientId: clientId || "",
      branch: branch || "main",
      tokenStorage: "LOCAL_STORAGE",
      tinaioConfig
    });
  };
  function assertShape(value, yupSchema, errorMessage) {
    const shape = yupSchema(yup__namespace);
    try {
      shape.validateSync(value);
    } catch (e) {
      const message = errorMessage || `Failed to assertShape - ${e.message}`;
      throw new Error(message);
    }
  }
  function safeAssertShape(value, yupSchema) {
    try {
      assertShape(value, yupSchema);
      return true;
    } catch (e) {
      return false;
    }
  }
  const LOCALSTORAGEKEY = "tina.isEditing";
  const isSSR = typeof window === "undefined";
  const isEditing = () => {
    if (!isSSR) {
      const isEdit = window.localStorage.getItem(LOCALSTORAGEKEY);
      return isEdit && isEdit === "true";
    }
    return false;
  };
  const setEditing = (isEditing2) => {
    if (!isSSR) {
      window.localStorage.setItem(LOCALSTORAGEKEY, isEditing2 ? "true" : "false");
    }
  };
  React__default["default"].createContext({
    edit: isEditing(),
    setEdit: void 0
  });
  function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  const AuthWallInner = ({
    children,
    cms,
    loginScreen,
    getModalActions
  }) => {
    const client = cms.api.tina;
    const [activeModal, setActiveModal] = React.useState(null);
    const [showChildren, setShowChildren] = React.useState(false);
    React__default["default"].useEffect(() => {
      client.isAuthenticated().then((isAuthenticated) => {
        if (isAuthenticated) {
          setShowChildren(true);
          cms.enable();
        } else {
          sleep(500).then(() => {
            setActiveModal("authenticate");
          });
        }
      });
    }, []);
    const onAuthSuccess = async () => {
      if (await client.isAuthenticated()) {
        setShowChildren(true);
        setActiveModal(null);
      } else {
        throw new Error("No access to repo");
      }
    };
    const otherModalActions = getModalActions ? getModalActions({
      closeModal: () => {
        setActiveModal(null);
      }
    }) : [];
    return /* @__PURE__ */ React__default["default"].createElement(React__default["default"].Fragment, null, activeModal === "authenticate" && /* @__PURE__ */ React__default["default"].createElement(ModalBuilder, {
      title: "Tina Cloud Authorization",
      message: "To save edits, Tina Cloud authorization is required. On save, changes will get commited using your account.",
      close,
      actions: [
        ...otherModalActions,
        {
          action: async () => {
            setEditing(false);
            window.location.reload();
          },
          name: "Close",
          primary: false
        },
        {
          name: "Continue to Tina Cloud",
          action: async () => {
            await client.authenticate();
            onAuthSuccess();
          },
          primary: true
        }
      ]
    }), showChildren ? children : loginScreen ? loginScreen : null);
  };
  const TinaCloudProvider = (props) => {
    useTinaAuthRedirect();
    const cms = React__default["default"].useMemo(() => props.cms || new toolkit.TinaCMS({
      enabled: true,
      sidebar: true
    }), [props.cms]);
    if (!cms.api.tina) {
      cms.api.tina = createClient(props);
    }
    const setupMedia = async () => {
      if (props.mediaStore) {
        cms.media.store = new (await props.mediaStore)(cms.api.tina);
      }
    };
    const handleListBranches = async () => {
      const { owner, repo } = props;
      const branches = await cms.api.tina.listBranches({ owner, repo });
      return branches.map((branch) => branch.name);
    };
    const handleCreateBranch = async (data) => {
      const newBranch = await cms.api.tina.createBranch(data);
      return newBranch;
    };
    setupMedia();
    const branchingEnabled = cms.flags.get("branch-switcher");
    React__default["default"].useEffect(() => {
      let branchSwitcher;
      if (branchingEnabled) {
        branchSwitcher = new toolkit.BranchSwitcherPlugin({
          cms,
          owner: props.owner,
          repo: props.repo,
          baseBranch: props.branch || "main",
          currentBranch: props.branch || "main",
          listBranches: handleListBranches,
          createBranch: handleCreateBranch,
          setCurrentBranch: () => console.log(props.branch)
        });
        cms.plugins.add(branchSwitcher);
      }
      return () => {
        if (!branchingEnabled) {
          if (branchSwitcher) {
            cms.plugins.remove(branchSwitcher);
          }
        }
      };
    }, [branchingEnabled, props.branch]);
    if (props.cmsCallback) {
      props.cmsCallback(cms);
    }
    return /* @__PURE__ */ React__default["default"].createElement(toolkit.TinaProvider, {
      cms
    }, /* @__PURE__ */ React__default["default"].createElement(AuthWallInner, __spreadProps(__spreadValues({}, props), {
      cms
    })));
  };
  const TinaCloudAuthWall = TinaCloudProvider;
  function useGraphqlForms({
    query,
    variables,
    onSubmit,
    formify: formify2 = null
  }) {
    const cms = toolkit.useCMS();
    const [formValues, setFormValues] = React__default["default"].useState({});
    const [data, setData] = React__default["default"].useState(null);
    const [initialData, setInitialData] = React__default["default"].useState({});
    const [pendingReset, setPendingReset] = React__default["default"].useState(null);
    const [isLoading, setIsLoading] = React__default["default"].useState(true);
    const [newUpdate, setNewUpdate] = React__default["default"].useState(null);
    React__default["default"].useState([]);
    const updateData = async () => {
      var _a;
      if (newUpdate) {
        const newValue = finalForm.getIn(formValues, newUpdate.get);
        const activeForm = finalForm.getIn(data, [newUpdate.queryName, "form"].join("."));
        if (!activeForm) {
          throw new Error(`Unable to find form for query ${newUpdate.queryName}`);
        }
        if (activeForm == null ? void 0 : activeForm.paths) {
          const asyncUpdate = (_a = activeForm.paths) == null ? void 0 : _a.find((p) => p.dataPath.join(".") === newUpdate.setReference);
          if (asyncUpdate) {
            const res = await cms.api.tina.request(asyncUpdate.queryString, {
              variables: { id: newValue }
            });
            const newData2 = finalForm.setIn(data, newUpdate.set, res.node);
            const newDataAndNewJSONData2 = finalForm.setIn(newData2, newUpdate.set.replace("data", "dataJSON"), newValue);
            setData(newDataAndNewJSONData2);
            setNewUpdate(null);
            return;
          }
        }
        if (newUpdate.lookup) {
          const field = getFieldUpdate(newUpdate, activeForm, formValues);
          if (field && field.typeMap) {
            newValue.forEach((item) => {
              if (!item.__typename) {
                item["__typename"] = field.typeMap[item._template];
              }
            });
          }
        }
        const newData = finalForm.setIn(data, newUpdate.set, newValue);
        const newDataAndNewJSONData = finalForm.setIn(newData, newUpdate.set.replace("data", "dataJSON"), newValue);
        setData(newDataAndNewJSONData);
        setNewUpdate(null);
      }
    };
    React__default["default"].useEffect(() => {
      updateData();
    }, [JSON.stringify(formValues)]);
    const queryString = graphql.print(query(gql__default["default"]));
    React__default["default"].useEffect(() => {
      if (pendingReset) {
        setData(__spreadProps(__spreadValues({}, data), { [pendingReset]: initialData[pendingReset] }));
        setPendingReset(null);
      }
    }, [pendingReset]);
    React__default["default"].useEffect(() => {
      setIsLoading(true);
      cms.api.tina.requestWithForm(query, { variables }).then((payload) => {
        setData(payload);
        setInitialData(payload);
        setIsLoading(false);
        Object.entries(payload).map(([queryName, result]) => {
          const canBeFormified = safeAssertShape(result, (yup2) => yup2.object({
            values: yup2.object().required(),
            form: yup2.object().required()
          }));
          if (!canBeFormified) {
            return;
          }
          assertShape(result, (yup2) => yup2.object({
            values: yup2.object().required(),
            form: yup2.object().required()
          }), `Unable to build form shape for fields at ${queryName}`);
          const formConfig = {
            id: queryName,
            label: result.form.label,
            initialValues: result.values,
            fields: result.form.fields,
            reset: () => {
              setPendingReset(queryName);
            },
            onSubmit: async (payload2) => {
              const params = transformDocumentIntoMutationRequestPayload(payload2, result.form.mutationInfo);
              const variables2 = { params };
              const mutationString = result.form.mutationInfo.string;
              if (onSubmit) {
                onSubmit({
                  queryString: mutationString,
                  mutationString,
                  variables: variables2
                });
              } else {
                try {
                  await cms.api.tina.request(mutationString, {
                    variables: variables2
                  });
                  cms.alerts.success("Document saved!");
                } catch (e) {
                  cms.alerts.error("There was a problem saving your document");
                  console.error(e);
                }
              }
            }
          };
          const { createForm, createGlobalForm } = generateFormCreators(cms);
          const SKIPPED = "SKIPPED";
          let form;
          let skipped;
          const skip = () => {
            skipped = SKIPPED;
          };
          if (skipped)
            return;
          if (formify2) {
            form = formify2({ formConfig, createForm, createGlobalForm, skip }, cms);
          } else {
            form = createForm(formConfig);
          }
          if (!(form instanceof toolkit.Form)) {
            if (skipped === SKIPPED) {
              return;
            }
            throw new Error("formify must return a form or skip()");
          }
          const { change } = form.finalForm;
          form.finalForm.change = (name, value) => {
            let referenceName = "";
            if (typeof name === "string") {
              referenceName = name.split(".").filter((item) => isNaN(Number(item))).join(".");
            } else {
              throw new Error(`Expected name to be of type string for FinalForm change callback`);
            }
            setNewUpdate({
              queryName,
              get: [queryName, "values", name].join("."),
              set: [queryName, "data", name].join("."),
              setReference: [queryName, "data", referenceName].join(".")
            });
            return change(name, value);
          };
          const _a = form.finalForm.mutators, { insert, move, remove } = _a, rest = __objRest(_a, ["insert", "move", "remove"]);
          const prepareNewUpdate = (name, lookup) => {
            const extra = {};
            if (lookup) {
              extra["lookup"] = lookup;
            }
            const referenceName = name.split(".").filter((item) => isNaN(Number(item))).join(".");
            setNewUpdate(__spreadValues({
              queryName,
              get: [queryName, "values", name].join("."),
              set: [queryName, "data", name].join("."),
              setReference: [queryName, "data", referenceName].join(".")
            }, extra));
          };
          form.finalForm.mutators = __spreadValues({
            insert: (...args) => {
              const fieldName = args[0];
              prepareNewUpdate(fieldName, fieldName);
              insert(...args);
            },
            move: (...args) => {
              const fieldName = args[0];
              prepareNewUpdate(fieldName, fieldName);
              move(...args);
            },
            remove: (...args) => {
              const fieldName = args[0];
              prepareNewUpdate(fieldName, fieldName);
              remove(...args);
            }
          }, rest);
          form.subscribe(({ values }) => {
            setFormValues(__spreadProps(__spreadValues({}, formValues), { [queryName]: { values } }));
          }, { values: true });
        });
      }).catch((e) => {
        cms.alerts.error("There was a problem setting up forms for your query");
        console.error("There was a problem setting up forms for your query");
        console.error(e);
        setIsLoading(false);
      });
    }, [queryString, JSON.stringify(variables)]);
    return [data, isLoading];
  }
  const transformDocumentIntoMutationRequestPayload = (document2, instructions) => {
    const _a = document2, { _collection, __typename, _template } = _a, rest = __objRest(_a, ["_collection", "__typename", "_template"]);
    const params = transformParams(rest);
    const paramsWithTemplate = instructions.includeTemplate ? { [_template]: params } : params;
    return instructions.includeCollection ? { [_collection]: paramsWithTemplate } : paramsWithTemplate;
  };
  const transformParams = (data) => {
    if (["string", "number", "boolean"].includes(typeof data)) {
      return data;
    }
    if (Array.isArray(data)) {
      return data.map((item) => transformParams(item));
    }
    try {
      assertShape(data, (yup2) => yup2.object({ _template: yup2.string().required() }));
      const _a = data, { _template, __typename } = _a, rest = __objRest(_a, ["_template", "__typename"]);
      const nested = transformParams(rest);
      return { [_template]: nested };
    } catch (e) {
      if (e.message === "Failed to assertShape - _template is a required field") {
        const accum = {};
        Object.entries(data).map(([keyName, value]) => {
          accum[keyName] = transformParams(value);
        });
        return accum;
      } else {
        if (!data) {
          return [];
        }
        throw e;
      }
    }
  };
  const getFieldUpdate = (newUpdate, activeForm, formValues) => {
    const items = newUpdate.lookup.split(".");
    let currentFields = activeForm.fields;
    items.map((item, index) => {
      const lookupName = items.slice(0, index + 1).join(".");
      const value = finalForm.getIn(formValues, [newUpdate.queryName, "values", lookupName].join("."));
      if (isNaN(Number(item))) {
        if (Array.isArray(currentFields)) {
          currentFields = currentFields.find((field) => field.name === item);
        }
      } else {
        const template = currentFields.templates ? currentFields.templates[value._template] : currentFields;
        currentFields = template.fields;
      }
    });
    return currentFields;
  };
  const generateFormCreators = (cms) => {
    const createForm = (formConfig) => {
      const form = new toolkit.Form(formConfig);
      cms.forms.add(form);
      return form;
    };
    const createGlobalForm = (formConfig) => {
      const form = new toolkit.Form(formConfig);
      cms.plugins.add(new toolkit.GlobalFormPlugin(form));
      return form;
    };
    return { createForm, createGlobalForm };
  };
  class ContentCreatorPlugin {
    constructor(options) {
      this.__type = "content-creator";
      this.fields = options.fields;
      this.name = options.label;
      this.onNewDocument = options.onNewDocument;
      this.collections = options.collections;
      this.onChange = options.onChange;
      this.initialValues = options.initialValues;
    }
    async onSubmit({ collection, template, relativePath }, cms) {
      try {
        const selectedCollection = this.collections.find((collectionItem) => collectionItem.slug === collection);
        const collectionFormat = selectedCollection.format;
        const extensionLength = -1 * (collectionFormat.length + 1);
        let relativePathWithExt = relativePath;
        if (relativePath.slice(extensionLength).toLocaleLowerCase() === `.${collectionFormat}`) {
          relativePathWithExt = `${relativePath.slice(0, -3)}.${collectionFormat}`;
        } else {
          relativePathWithExt = `${relativePath}.${collectionFormat}`;
        }
        const payload = {
          relativePath: relativePathWithExt,
          collection,
          template
        };
        try {
          const res = await cms.api.tina.addPendingContent(payload);
          if (res.errors) {
            res.errors.map((e) => {
              cms.alerts.error(e.message);
            });
          } else {
            cms.alerts.info("Document created!");
            if (typeof this.onNewDocument === "function") {
              this.onNewDocument(res.addPendingDocument.sys);
            }
          }
        } catch (e) {
          cms.alerts.error(e.message);
        }
      } catch (e) {
        cms.alerts.error(e.message);
      }
    }
  }
  const useDocumentCreatorPlugin = (args) => {
    const cms = toolkit.useCMS();
    const [values, setValues] = React__default["default"].useState({});
    const [plugin, setPlugin] = React__default["default"].useState(null);
    React__default["default"].useEffect(() => {
      const run = async () => {
        var _a;
        const res = await cms.api.tina.request((gql2) => gql2`
          {
            getCollections {
              label
              slug
              format
              templates
            }
          }
        `, { variables: {} });
        const allCollectionOptions = [];
        res.getCollections.forEach((collection) => {
          const value = collection.slug;
          const label = `${collection.label}`;
          allCollectionOptions.push({ value, label });
        });
        let collectionOptions;
        if (args && args.filterCollections && typeof args.filterCollections === "function") {
          const filtered = args.filterCollections(allCollectionOptions);
          collectionOptions = [
            { value: "", label: "Choose Collection" },
            ...filtered
          ];
        } else {
          collectionOptions = [
            { value: "", label: "Choose Collection" },
            ...allCollectionOptions
          ];
        }
        const templateOptions = [
          { value: "", label: "Choose Template" }
        ];
        if (values.collection) {
          const filteredCollection = res.getCollections.find((c) => c.slug === values.collection);
          (_a = filteredCollection == null ? void 0 : filteredCollection.templates) == null ? void 0 : _a.forEach((template) => {
            templateOptions.push({ value: template.name, label: template.label });
          });
        }
        setPlugin(new ContentCreatorPlugin({
          label: "Add Document",
          onNewDocument: args && args.onNewDocument,
          collections: res.getCollections,
          onChange: async ({ values: values2 }) => {
            setValues(values2);
          },
          initialValues: values,
          fields: [
            {
              component: "select",
              name: "collection",
              label: "Collection",
              description: "Select the collection.",
              options: collectionOptions,
              validate: async (value, allValues, meta) => {
                if (!value) {
                  return true;
                }
              }
            },
            {
              component: "select",
              name: "template",
              label: "Template",
              description: "Select the template.",
              options: templateOptions,
              validate: async (value, allValues, meta) => {
                if (!value && templateOptions.length > 1) {
                  if (meta.dirty) {
                    return "Required";
                  }
                  return true;
                }
              }
            },
            {
              component: "text",
              name: "relativePath",
              label: "Name",
              description: `A unique name for the content. Example: "newPost" or "blog_022021`,
              placeholder: "newPost",
              validate: (value, allValues, meta) => {
                if (!value) {
                  if (meta.dirty) {
                    return "Required";
                  }
                  return true;
                }
                const isValid = /^[_a-zA-Z][-,_a-zA-Z0-9]*$/.test(value);
                if (value && !isValid) {
                  return "Must begin with a-z, A-Z, or _ and contain only a-z, A-Z, 0-9, - or _";
                }
              }
            }
          ]
        }));
      };
      run();
    }, [cms, values == null ? void 0 : values.collection]);
    React__default["default"].useEffect(() => {
      if (plugin) {
        cms.plugins.add(plugin);
      }
      return () => {
        if (plugin) {
          cms.plugins.remove(plugin);
        }
      };
    }, [plugin]);
  };
  const SetupHooks = (props) => {
    const cms = toolkit.useCMS();
    const [payload, isLoading] = useGraphqlForms({
      query: (gql2) => gql2(props.query),
      variables: props.variables || {},
      formify: (args) => {
        if (props.formifyCallback) {
          return props.formifyCallback(args, cms);
        } else {
          return args.createForm(args.formConfig);
        }
      }
    });
    useDocumentCreatorPlugin(props.documentCreatorCallback);
    return /* @__PURE__ */ React__default["default"].createElement(ErrorBoundary, null, isLoading ? /* @__PURE__ */ React__default["default"].createElement(Loader, null, props.children(props)) : props.children(__spreadProps(__spreadValues({}, props), { data: payload })));
  };
  class ErrorBoundary extends React__default["default"].Component {
    constructor(props) {
      super(props);
      this.state = {
        hasError: props.hasError,
        message: "",
        pageRefresh: false
      };
    }
    static getDerivedStateFromError(error) {
      return { hasError: true, message: error.message };
    }
    render() {
      if (this.state.hasError && !this.state.pageRefresh) {
        return /* @__PURE__ */ React__default["default"].createElement("div", {
          style: {
            background: "#efefef",
            height: "100vh",
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
          }
        }, /* @__PURE__ */ React__default["default"].createElement("style", null, "            body {              margin: 0;            }          "), /* @__PURE__ */ React__default["default"].createElement("div", {
          style: {
            background: "#fff",
            maxWidth: "400px",
            padding: "20px",
            fontFamily: "'Inter', sans-serif",
            borderRadius: "5px",
            boxShadow: "0 6px 24px rgb(0 37 91 / 5%), 0 2px 4px rgb(0 37 91 / 3%)"
          }
        }, /* @__PURE__ */ React__default["default"].createElement("h3", {
          style: { color: "#eb6337" }
        }, "TinaCMS Render Error"), /* @__PURE__ */ React__default["default"].createElement("p", null, "Tina caught an error while updating the page:"), /* @__PURE__ */ React__default["default"].createElement("pre", null, this.state.message), /* @__PURE__ */ React__default["default"].createElement("br", null), /* @__PURE__ */ React__default["default"].createElement("p", null, `If you've just updated the form, undo your most recent changes and click "refresh". If after a few refreshes, you're still encountering this error. There is a bigger issue with the site. Please reach out to your site admin.`), /* @__PURE__ */ React__default["default"].createElement("div", {
          style: { padding: "10px 0" }
        }, /* @__PURE__ */ React__default["default"].createElement("button", {
          style: {
            background: "#eb6337",
            padding: "12px 18px",
            cursor: "pointer",
            borderRadius: "50px",
            textTransform: "uppercase",
            letterSpacing: "2px",
            fontWeight: "bold",
            border: "none",
            color: "white"
          },
          onClick: () => {
            this.setState({ pageRefresh: true });
            setTimeout(() => this.setState({ hasError: false, pageRefresh: false }), 3e3);
          }
        }, "Refresh"))));
      }
      if (this.state.pageRefresh) {
        return /* @__PURE__ */ React__default["default"].createElement(Loader, null, "Let's try that again.");
      }
      return this.props.children;
    }
  }
  const TinaCMSProvider2 = (_c) => {
    var _d = _c, {
      children,
      branch,
      clientId,
      isLocalClient,
      cmsCallback,
      mediaStore,
      tinaioConfig
    } = _d, props = __objRest(_d, [
      "children",
      "branch",
      "clientId",
      "isLocalClient",
      "cmsCallback",
      "mediaStore",
      "tinaioConfig"
    ]);
    if (typeof props.query === "string") {
      props.query;
    }
    return /* @__PURE__ */ React__default["default"].createElement(TinaCloudProvider, {
      branch,
      clientId,
      tinaioConfig,
      isLocalClient,
      cmsCallback,
      mediaStore
    }, props.query ? /* @__PURE__ */ React__default["default"].createElement(SetupHooks, __spreadProps(__spreadValues({
      key: props.query
    }, props), {
      query: props.query || ""
    }), children) : children(props));
  };
  const Loader = (props) => {
    return /* @__PURE__ */ React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */ React__default["default"].createElement("div", {
      style: {
        position: "fixed",
        background: "rgba(0, 0, 0, 0.5)",
        inset: 0,
        zIndex: 200,
        opacity: "0.8",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        padding: "40px"
      }
    }, /* @__PURE__ */ React__default["default"].createElement("div", {
      style: {
        background: "#f6f6f9",
        boxShadow: "0px 2px 3px rgba(0, 0, 0, 0.05), 0 4px 12px rgba(0, 0, 0, 0.1)",
        borderRadius: "5px",
        padding: "40px 32px",
        width: "460px",
        maxWidth: "90%",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexDirection: "column"
      }
    }, /* @__PURE__ */ React__default["default"].createElement("svg", {
      style: {
        width: "64px",
        color: "#2296fe",
        marginTop: "-8px",
        marginBottom: "16px"
      },
      version: "1.1",
      id: "L5",
      xmlns: "http://www.w3.org/2000/svg",
      xmlnsXlink: "http://www.w3.org/1999/xlink",
      x: "0px",
      y: "0px",
      viewBox: "0 0 100 64",
      enableBackground: "new 0 0 0 0",
      xmlSpace: "preserve"
    }, /* @__PURE__ */ React__default["default"].createElement("circle", {
      fill: "currentColor",
      stroke: "none",
      cx: 6,
      cy: 32,
      r: 6
    }, /* @__PURE__ */ React__default["default"].createElement("animateTransform", {
      attributeName: "transform",
      dur: "1s",
      type: "translate",
      values: "0 15 ; 0 -15; 0 15",
      calcMode: "spline",
      keySplines: "0.8 0 0.4 1; 0.4 0 0.2 1",
      repeatCount: "indefinite",
      begin: "0.1"
    })), /* @__PURE__ */ React__default["default"].createElement("circle", {
      fill: "currentColor",
      stroke: "none",
      cx: 30,
      cy: 32,
      r: 6
    }, /* @__PURE__ */ React__default["default"].createElement("animateTransform", {
      attributeName: "transform",
      dur: "1s",
      type: "translate",
      values: "0 15 ; 0 -10; 0 15",
      calcMode: "spline",
      keySplines: "0.8 0 0.4 1; 0.4 0 0.2 1",
      repeatCount: "indefinite",
      begin: "0.2"
    })), /* @__PURE__ */ React__default["default"].createElement("circle", {
      fill: "currentColor",
      stroke: "none",
      cx: 54,
      cy: 32,
      r: 6
    }, /* @__PURE__ */ React__default["default"].createElement("animateTransform", {
      attributeName: "transform",
      dur: "1s",
      type: "translate",
      values: "0 15 ; 0 -5; 0 15",
      calcMode: "spline",
      keySplines: "0.8 0 0.4 1; 0.4 0 0.2 1",
      repeatCount: "indefinite",
      begin: "0.3"
    }))), /* @__PURE__ */ React__default["default"].createElement("p", {
      style: {
        fontSize: "18px",
        color: "#252336",
        textAlign: "center",
        lineHeight: "1.3",
        fontFamily: "'Inter', sans-serif",
        fontWeight: "normal"
      }
    }, "Please wait, Tina is loading data..."))), props.children);
  };
  const getStaticPropsForTina = async ({
    query,
    variables
  }) => {
    try {
      const data = await staticRequest({ query, variables });
      return JSON.parse(JSON.stringify({
        data,
        query,
        variables
      }));
    } catch (e) {
      return JSON.parse(JSON.stringify({
        data: {},
        query,
        variables
      }));
    }
  };
  function is_server() {
    return !(typeof window != "undefined" && window.document);
  }
  const staticRequest = async ({
    query,
    variables
  }) => {
    const client = new LocalClient();
    if (!is_server()) {
      console.warn(`Whoops! Looks like you are using \`staticRequest\` in the browser to fetch data.

The local server is not available outside of \`getStaticProps\` or \`getStaticPaths\` functions. 
This function should only be called on the server at build time.

This will work when developing locally but NOT when deployed to production. 
`);
    }
    return client.request(query, { variables });
  };
  function gql(strings) {
    return strings[0];
  }
  var DefaultContext = {
    color: void 0,
    size: void 0,
    className: void 0,
    style: void 0,
    attr: void 0
  };
  var IconContext = React__default["default"].createContext && React__default["default"].createContext(DefaultContext);
  var __assign = function() {
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    return __assign.apply(this, arguments);
  };
  var __rest = function(s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };
  function Tree2Element(tree) {
    return tree && tree.map(function(node, i) {
      return React__default["default"].createElement(node.tag, __assign({
        key: i
      }, node.attr), Tree2Element(node.child));
    });
  }
  function GenIcon(data) {
    return function(props) {
      return React__default["default"].createElement(IconBase, __assign({
        attr: __assign({}, data.attr)
      }, props), Tree2Element(data.child));
    };
  }
  function IconBase(props) {
    var elem = function(conf) {
      var attr = props.attr, size = props.size, title = props.title, svgProps = __rest(props, ["attr", "size", "title"]);
      var computedSize = size || conf.size || "1em";
      var className;
      if (conf.className)
        className = conf.className;
      if (props.className)
        className = (className ? className + " " : "") + props.className;
      return React__default["default"].createElement("svg", __assign({
        stroke: "currentColor",
        fill: "currentColor",
        strokeWidth: "0"
      }, conf.attr, attr, svgProps, {
        className,
        style: __assign(__assign({
          color: props.color || conf.color
        }, conf.style), props.style),
        height: computedSize,
        width: computedSize,
        xmlns: "http://www.w3.org/2000/svg"
      }), title && React__default["default"].createElement("title", null, title), props.children);
    };
    return IconContext !== void 0 ? React__default["default"].createElement(IconContext.Consumer, null, function(conf) {
      return elem(conf);
    }) : elem(DefaultContext);
  }
  function ImFilesEmpty(props) {
    return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "d": "M14.341 5.579c-0.347-0.473-0.831-1.027-1.362-1.558s-1.085-1.015-1.558-1.362c-0.806-0.591-1.197-0.659-1.421-0.659h-5.75c-0.689 0-1.25 0.561-1.25 1.25v11.5c0 0.689 0.561 1.25 1.25 1.25h9.5c0.689 0 1.25-0.561 1.25-1.25v-7.75c0-0.224-0.068-0.615-0.659-1.421zM12.271 4.729c0.48 0.48 0.856 0.912 1.134 1.271h-2.406v-2.405c0.359 0.278 0.792 0.654 1.271 1.134v0zM14 14.75c0 0.136-0.114 0.25-0.25 0.25h-9.5c-0.136 0-0.25-0.114-0.25-0.25v-11.5c0-0.135 0.114-0.25 0.25-0.25 0 0 5.749-0 5.75 0v3.5c0 0.276 0.224 0.5 0.5 0.5h3.5v7.75z" } }, { "tag": "path", "attr": { "d": "M9.421 0.659c-0.806-0.591-1.197-0.659-1.421-0.659h-5.75c-0.689 0-1.25 0.561-1.25 1.25v11.5c0 0.604 0.43 1.109 1 1.225v-12.725c0-0.135 0.115-0.25 0.25-0.25h7.607c-0.151-0.124-0.297-0.238-0.437-0.341z" } }] })(props);
  }
  function VscOpenPreview(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 16 16", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "clipRule": "evenodd", "d": "M3 1h11l1 1v5.3a3.21 3.21 0 0 0-1-.3V2H9v10.88L7.88 14H3l-1-1V2l1-1zm0 12h5V2H3v11zm10.379-4.998a2.53 2.53 0 0 0-1.19.348h-.03a2.51 2.51 0 0 0-.799 3.53L9 14.23l.71.71 2.35-2.36c.325.22.7.358 1.09.4a2.47 2.47 0 0 0 1.14-.13 2.51 2.51 0 0 0 1-.63 2.46 2.46 0 0 0 .58-1 2.63 2.63 0 0 0 .07-1.15 2.53 2.53 0 0 0-1.35-1.81 2.53 2.53 0 0 0-1.211-.258zm.24 3.992a1.5 1.5 0 0 1-.979-.244 1.55 1.55 0 0 1-.56-.68 1.49 1.49 0 0 1-.08-.86 1.49 1.49 0 0 1 1.18-1.18 1.49 1.49 0 0 1 .86.08c.276.117.512.311.68.56a1.5 1.5 0 0 1-1.1 2.324z" } }] })(props);
  }
  const Layout = ({ children }) => {
    return /* @__PURE__ */ React__default["default"].createElement("div", {
      style: {
        position: "fixed",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        overflow: "auto",
        background: "#F6F6F9",
        zIndex: 9999
      }
    }, children);
  };
  const GetCMS = ({ children }) => {
    try {
      const cms = toolkit.useCMS();
      return /* @__PURE__ */ React__default["default"].createElement(React__default["default"].Fragment, null, children(cms));
    } catch (e) {
      return null;
    }
  };
  const useGetCollections = (cms) => {
    const [collections, setCollections] = React.useState([]);
    React.useEffect(() => {
      const fetchCollections = async () => {
        const response = await cms.api.tina.request(`query{ getCollections { label, name } }`, {});
        setCollections(response.getCollections);
      };
      fetchCollections();
    }, [cms]);
    return collections;
  };
  const GetCollections = ({ cms, children }) => {
    const collections = useGetCollections(cms);
    if (!collections)
      return null;
    return /* @__PURE__ */ React__default["default"].createElement(React__default["default"].Fragment, null, children(collections));
  };
  function BiEdit(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "m7 17.013 4.413-.015 9.632-9.54c.378-.378.586-.88.586-1.414s-.208-1.036-.586-1.414l-1.586-1.586c-.756-.756-2.075-.752-2.825-.003L7 12.583v4.43zM18.045 4.458l1.589 1.583-1.597 1.582-1.586-1.585 1.594-1.58zM9 13.417l6.03-5.973 1.586 1.586-6.029 5.971L9 15.006v-1.589z" } }, { "tag": "path", "attr": { "d": "M5 21h14c1.103 0 2-.897 2-2v-8.668l-2 2V19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2z" } }] })(props);
  }
  function BiExit(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M19.002 3h-14c-1.103 0-2 .897-2 2v4h2V5h14v14h-14v-4h-2v4c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2V5c0-1.103-.898-2-2-2z" } }, { "tag": "path", "attr": { "d": "m11 16 5-4-5-4v3.001H3v2h8z" } }] })(props);
  }
  function BiLogIn(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "m13 16 5-4-5-4v3H4v2h9z" } }, { "tag": "path", "attr": { "d": "M20 3h-9c-1.103 0-2 .897-2 2v4h2V5h9v14h-9v-4H9v4c0 1.103.897 2 2 2h9c1.103 0 2-.897 2-2V5c0-1.103-.897-2-2-2z" } }] })(props);
  }
  function MdOutlineArrowBack(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" } }, { "tag": "path", "attr": { "d": "M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" } }] })(props);
  }
  const login = () => {
    setEditing(true);
    window.location.reload();
  };
  const LoginPage = () => {
    return /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "h-screen w-full bg-gradient-to-b from-blue-900 to-gray-900 flex items-center justify-center px-4 py-6"
    }, /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "bg-white rounded-lg overflow-hidden shadow-lg w-full max-w-md"
    }, /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "px-5 py-4 border-b border-gray-150"
    }, /* @__PURE__ */ React__default["default"].createElement("h2", {
      className: "text-2xl tracking-wide text-gray-700 flex items-center gap-0.5"
    }, /* @__PURE__ */ React__default["default"].createElement("svg", {
      viewBox: "0 0 32 32",
      fill: "#EC4815",
      xmlns: "http://www.w3.org/2000/svg",
      className: "w-10 h-auto"
    }, /* @__PURE__ */ React__default["default"].createElement("path", {
      d: "M18.6466 14.5553C19.9018 13.5141 20.458 7.36086 21.0014 5.14903C21.5447 2.9372 23.7919 3.04938 23.7919 3.04938C23.7919 3.04938 23.2085 4.06764 23.4464 4.82751C23.6844 5.58738 25.3145 6.26662 25.3145 6.26662L24.9629 7.19622C24.9629 7.19622 24.2288 7.10204 23.7919 7.9785C23.355 8.85496 24.3392 17.4442 24.3392 17.4442C24.3392 17.4442 21.4469 22.7275 21.4469 24.9206C21.4469 27.1136 22.4819 28.9515 22.4819 28.9515H21.0296C21.0296 28.9515 18.899 26.4086 18.462 25.1378C18.0251 23.8669 18.1998 22.596 18.1998 22.596C18.1998 22.596 15.8839 22.4646 13.8303 22.596C11.7767 22.7275 10.4072 24.498 10.16 25.4884C9.91287 26.4787 9.81048 28.9515 9.81048 28.9515H8.66211C7.96315 26.7882 7.40803 26.0129 7.70918 24.9206C8.54334 21.8949 8.37949 20.1788 8.18635 19.4145C7.99321 18.6501 6.68552 17.983 6.68552 17.983C7.32609 16.6741 7.97996 16.0452 10.7926 15.9796C13.6052 15.914 17.3915 15.5965 18.6466 14.5553Z"
    }), /* @__PURE__ */ React__default["default"].createElement("path", {
      d: "M11.1268 24.7939C11.1268 24.7939 11.4236 27.5481 13.0001 28.9516H14.3511C13.0001 27.4166 12.8527 23.4155 12.8527 23.4155C12.1656 23.6399 11.3045 24.3846 11.1268 24.7939Z"
    })), /* @__PURE__ */ React__default["default"].createElement("span", null, "Tina Admin"))), /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "px-5 py-4 "
    }, /* @__PURE__ */ React__default["default"].createElement("p", {
      className: "text-base font-sans leading-normal"
    }, "Please log in to Tina Cloud to access your admin dashboard.")), /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "px-5 py-4 flex gap-4 w-full justify-between"
    }, /* @__PURE__ */ React__default["default"].createElement("a", {
      href: "/",
      className: "flex-1 text-center inline-flex justify-center items-center px-8 py-3 shadow-sm text-sm leading-4 font-medium rounded-full text-gray-600 border border-gray-150 hover:opacity-80 hover:bg-gray-50 focus:outline-none focus:shadow-outline-blue  transition duration-150 ease-out"
    }, /* @__PURE__ */ React__default["default"].createElement(MdOutlineArrowBack, {
      className: "w-6 h-auto mr-1.5 opacity-80"
    }), " Back to site"), /* @__PURE__ */ React__default["default"].createElement("button", {
      type: "submit",
      onClick: () => login(),
      className: "flex-1 justify-center text-center inline-flex items-center px-8 py-3 shadow-sm border border-transparent text-sm leading-4 font-medium rounded-full text-white hover:opacity-80 focus:outline-none focus:shadow-outline-blue  transition duration-150 ease-out",
      style: { background: "#0084FF" }
    }, /* @__PURE__ */ React__default["default"].createElement(BiLogIn, {
      className: "w-6 h-auto mr-1.5 opacity-80"
    }), " Log in"))));
  };
  const DashboardPage = () => {
    return /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "h-screen overflow-y-auto flex flex-col justify-start items-stretch"
    }, /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "flex-0 px-6 pt-16 pb-10 w-full flex justify-center bg-white border-b border-gray-150"
    }, /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "max-w-screen-md w-full"
    }, /* @__PURE__ */ React__default["default"].createElement("h3", {
      className: "text-4xl"
    }, "Welcome to Tina CMS."))), /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "w-full px-6 py-10 flex justify-center"
    }, /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "max-w-screen-md w-full"
    }, /* @__PURE__ */ React__default["default"].createElement("p", {
      className: "text-gray-700 text-lg"
    }, "This is your dashboard for editing or creating content. Select a collection on the left to begin."))));
  };
  const useGetCollection = (cms, collectionName, includeDocuments = true) => {
    const [collection, setCollection] = React.useState(void 0);
    React.useEffect(() => {
      const fetchCollection = async () => {
        const response = await cms.api.tina.request(`
          query($collection: String!, $includeDocuments: Boolean!){
            getCollection(collection: $collection){
              name
              label
              format
              documents @include(if: $includeDocuments) {
                totalCount
                edges {
                  node {
                    ... on Document {
                      sys {
                        breadcrumbs
                        path
                        basename
                        relativePath
                        filename
                        extension
                      }
                    }
                  }
                }
              }
            }
          }`, { variables: { collection: collectionName, includeDocuments } });
        setCollection(response.getCollection);
      };
      fetchCollection();
    }, [cms, collectionName]);
    return collection;
  };
  const GetCollection = ({
    cms,
    collectionName,
    includeDocuments = true,
    children
  }) => {
    const collection = useGetCollection(cms, collectionName, includeDocuments);
    if (!collection) {
      return null;
    }
    return /* @__PURE__ */ React__default["default"].createElement(React__default["default"].Fragment, null, children(collection));
  };
  const CollectionListPage = () => {
    const location = reactRouterDom.useLocation();
    const { collectionName } = reactRouterDom.useParams();
    return /* @__PURE__ */ React__default["default"].createElement(GetCMS, null, (cms) => /* @__PURE__ */ React__default["default"].createElement(GetCollection, {
      cms,
      collectionName,
      includeDocuments: true
    }, (collection) => {
      const totalCount = collection.documents.totalCount;
      const documents = collection.documents.edges;
      return /* @__PURE__ */ React__default["default"].createElement("div", {
        className: "px-6 py-14 h-screen overflow-y-auto flex justify-center"
      }, /* @__PURE__ */ React__default["default"].createElement("div", {
        className: "max-w-screen-md w-full"
      }, /* @__PURE__ */ React__default["default"].createElement("div", {
        className: "w-full flex justify-between items-end"
      }, /* @__PURE__ */ React__default["default"].createElement("h3", {
        className: "text-3xl"
      }, collection.label), /* @__PURE__ */ React__default["default"].createElement(reactRouterDom.Link, {
        to: `${location.pathname}/new`,
        className: "inline-flex items-center px-8 py-3 shadow-sm border border-transparent text-sm leading-4 font-medium rounded-full text-white hover:opacity-80 focus:outline-none focus:shadow-outline-blue  transition duration-150 ease-out",
        style: { background: "#0084FF" }
      }, "Create New")), totalCount > 0 && /* @__PURE__ */ React__default["default"].createElement("div", {
        className: "mt-8 shadow overflow-hidden border-b border-gray-200 sm:rounded-lg"
      }, /* @__PURE__ */ React__default["default"].createElement("table", {
        className: "min-w-full"
      }, /* @__PURE__ */ React__default["default"].createElement("tbody", {
        className: "bg-white divide-y divide-gray-150"
      }, documents.map((document2) => /* @__PURE__ */ React__default["default"].createElement("tr", {
        key: document2.node.sys.relativePath
      }, /* @__PURE__ */ React__default["default"].createElement("td", {
        className: "px-6 py-2 whitespace-nowrap"
      }, /* @__PURE__ */ React__default["default"].createElement(reactRouterDom.Link, {
        to: `${location.pathname}/${document2.node.sys.filename}`,
        className: "text-blue-600 hover:text-blue-400 flex items-center gap-3"
      }, /* @__PURE__ */ React__default["default"].createElement(BiEdit, {
        className: "inline-block h-6 w-auto opacity-70"
      }), " ", /* @__PURE__ */ React__default["default"].createElement("span", null, /* @__PURE__ */ React__default["default"].createElement("span", {
        className: "block text-xs text-gray-400 mb-1 uppercase"
      }, "Filename"), /* @__PURE__ */ React__default["default"].createElement("span", {
        className: "h-5 leading-5 block whitespace-nowrap"
      }, document2.node.sys.filename)))), /* @__PURE__ */ React__default["default"].createElement("td", {
        className: "px-6 py-4 whitespace-nowrap"
      }, /* @__PURE__ */ React__default["default"].createElement("span", {
        className: "block text-xs text-gray-400 mb-1 uppercase"
      }, "Extension"), /* @__PURE__ */ React__default["default"].createElement("span", {
        className: "h-5 leading-5 block text-sm font-medium text-gray-900"
      }, document2.node.sys.extension)))))))));
    }));
  };
  const useGetDocumentFields = (cms, collectionName) => {
    const [info, setInfo] = React.useState({
      collection: void 0,
      fields: void 0,
      mutationInfo: void 0
    });
    React.useEffect(() => {
      const fetchDocumentFields = async () => {
        const response = await cms.api.tina.request(`query { getDocumentFields }`, {});
        const documentFields = response.getDocumentFields;
        const collection = documentFields[collectionName].collection;
        const fields = documentFields[collectionName].fields;
        const mutationInfo = documentFields[collectionName].mutationInfo;
        setInfo({
          collection,
          fields,
          mutationInfo
        });
      };
      fetchDocumentFields();
    }, [cms, collectionName]);
    return info;
  };
  const GetDocumentFields = ({
    cms,
    collectionName,
    children
  }) => {
    const { collection, fields, mutationInfo } = useGetDocumentFields(cms, collectionName);
    if (!collection || !fields || !mutationInfo) {
      return null;
    }
    return /* @__PURE__ */ React__default["default"].createElement(React__default["default"].Fragment, null, children(collection, fields, mutationInfo));
  };
  const createDocument = async (cms, collection, mutationInfo, values) => {
    const _a = values, { relativePath } = _a, leftover = __objRest(_a, ["relativePath"]);
    const { includeCollection, includeTemplate } = mutationInfo;
    const params = transformDocumentIntoMutationRequestPayload(__spreadValues({
      _collection: collection.name
    }, leftover), {
      includeCollection,
      includeTemplate
    });
    await cms.api.tina.request(`mutation($collection: String!, $relativePath: String!, $params: DocumentMutation!) {
      createDocument(
        collection: $collection, 
        relativePath: $relativePath, 
        params: $params
      ){__typename}
    }`, {
      variables: {
        collection: collection.name,
        relativePath,
        params
      }
    });
  };
  const CollectionCreatePage = () => {
    const { collectionName } = reactRouterDom.useParams();
    const history = reactRouterDom.useHistory();
    return /* @__PURE__ */ React__default["default"].createElement(GetCMS, null, (cms) => /* @__PURE__ */ React__default["default"].createElement(GetDocumentFields, {
      cms,
      collectionName
    }, (collection, fields, mutationInfo) => {
      const form = new toolkit.Form({
        id: "create-form",
        label: "form",
        fields: [
          {
            name: "relativePath",
            label: "Relative Path",
            component: "text",
            required: true,
            defaultValue: `${collection.name}${Date.now()}.${collection.format}`
          },
          ...fields
        ],
        onSubmit: async (values) => {
          await createDocument(cms, collection, mutationInfo, values);
          history.push(`/admin/collections/${collection.name}`);
        }
      });
      return /* @__PURE__ */ React__default["default"].createElement("div", {
        className: "w-full h-screen"
      }, /* @__PURE__ */ React__default["default"].createElement("div", {
        className: "flex flex-col items-center w-full flex-1"
      }, /* @__PURE__ */ React__default["default"].createElement(toolkit.FullscreenFormBuilder, {
        label: collection.label + " - Create New",
        form
      })));
    }));
  };
  const useGetDocument = (cms, collectionName, relativePath) => {
    const [document2, setDocument] = React.useState(void 0);
    React.useEffect(() => {
      const fetchDocument = async () => {
        const response = await cms.api.tina.request(`
        query($collection: String!, $relativePath: String!) {
          getDocument(collection:$collection, relativePath:$relativePath) {
            ... on Document {
              form
              values
            }
          }
        }`, { variables: { collection: collectionName, relativePath } });
        setDocument(response.getDocument);
      };
      fetchDocument();
    }, [cms, collectionName, relativePath]);
    return document2;
  };
  const GetDocument = ({
    cms,
    collectionName,
    relativePath,
    children
  }) => {
    const document2 = useGetDocument(cms, collectionName, relativePath);
    if (!document2) {
      return null;
    }
    return /* @__PURE__ */ React__default["default"].createElement(React__default["default"].Fragment, null, children(document2));
  };
  const updateDocument = async (cms, collection, document2, relativePath, values) => {
    const { includeCollection, includeTemplate } = document2.form.mutationInfo;
    const params = transformDocumentIntoMutationRequestPayload(values, {
      includeCollection,
      includeTemplate
    });
    await cms.api.tina.request(`mutation($collection: String!, $relativePath: String!, $params: DocumentMutation!) {
      updateDocument(
        collection: $collection, 
        relativePath: $relativePath, 
        params: $params
      ){__typename}
    }`, {
      variables: {
        collection: collection.name,
        relativePath,
        params
      }
    });
  };
  const CollectionUpdatePage = () => {
    const { collectionName, filename } = reactRouterDom.useParams();
    const history = reactRouterDom.useHistory();
    return /* @__PURE__ */ React__default["default"].createElement(GetCMS, null, (cms) => /* @__PURE__ */ React__default["default"].createElement(GetCollection, {
      cms,
      collectionName,
      includeDocuments: false
    }, (collection) => {
      const relativePath = `${filename}.${collection.format}`;
      return /* @__PURE__ */ React__default["default"].createElement(GetDocument, {
        cms,
        collectionName: collection.name,
        relativePath
      }, (document2) => {
        const form = new toolkit.Form({
          id: "update-form",
          label: "form",
          fields: document2.form.fields,
          initialValues: document2.values,
          onSubmit: async (values) => {
            await updateDocument(cms, collection, document2, relativePath, values);
            history.push(`/admin/collections/${collection.name}`);
          }
        });
        return /* @__PURE__ */ React__default["default"].createElement("div", {
          className: "w-full h-screen"
        }, /* @__PURE__ */ React__default["default"].createElement("div", {
          className: "flex flex-col items-center w-full flex-1"
        }, /* @__PURE__ */ React__default["default"].createElement(toolkit.FullscreenFormBuilder, {
          label: collection.label + ` - ` + filename,
          form
        })));
      });
    }));
  };
  const useEmbedTailwind = () => {
    React.useEffect(() => {
      const isSSR2 = typeof window === "undefined";
      if (!isSSR2) {
        const head = document.head;
        const link = document.createElement("link");
        link.id = "tina-admin-stylesheet";
        link.type = "text/css";
        link.rel = "stylesheet";
        link.href = "https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css";
        head.appendChild(link);
      }
    }, []);
  };
  const logout = () => {
    setEditing(false);
    window.location.reload();
  };
  const TinaAdmin = () => {
    useEmbedTailwind();
    const isSSR2 = typeof window === "undefined";
    if (isSSR2) {
      return null;
    }
    const isEdit = isEditing();
    if (!isEdit) {
      return /* @__PURE__ */ React__default["default"].createElement(Layout, null, /* @__PURE__ */ React__default["default"].createElement(LoginPage, null));
    }
    return /* @__PURE__ */ React__default["default"].createElement(GetCMS, null, (cms) => /* @__PURE__ */ React__default["default"].createElement(GetCollections, {
      cms
    }, (collections) => /* @__PURE__ */ React__default["default"].createElement(Layout, null, /* @__PURE__ */ React__default["default"].createElement(reactRouterDom.BrowserRouter, null, /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "flex items-stretch h-screen overflow-hidden"
    }, /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "flex flex-col w-80 lg:w-96 flex-shrink-0 bg-gradient-to-b from-white to-gray-50 border-r border-gray-200"
    }, /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "border-b border-gray-200"
    }, /* @__PURE__ */ React__default["default"].createElement(react.Menu, {
      as: "div",
      className: "relative block"
    }, ({ open }) => /* @__PURE__ */ React__default["default"].createElement("div", null, /* @__PURE__ */ React__default["default"].createElement(react.Menu.Button, {
      className: `group w-full px-6 py-4 flex justify-between items-center transition-colors duration-150 ease-out ${open ? `bg-gray-50` : `bg-transparent`}`
    }, /* @__PURE__ */ React__default["default"].createElement("span", {
      className: "text-left inline-flex items-center text-2xl tracking-wide text-gray-800 flex-1 gap-1 opacity-80 group-hover:opacity-100 transition-opacity duration-150 ease-out"
    }, /* @__PURE__ */ React__default["default"].createElement("svg", {
      viewBox: "0 0 32 32",
      fill: "#EC4815",
      xmlns: "http://www.w3.org/2000/svg",
      className: "w-10 h-auto -ml-1"
    }, /* @__PURE__ */ React__default["default"].createElement("path", {
      d: "M18.6466 14.5553C19.9018 13.5141 20.458 7.36086 21.0014 5.14903C21.5447 2.9372 23.7919 3.04938 23.7919 3.04938C23.7919 3.04938 23.2085 4.06764 23.4464 4.82751C23.6844 5.58738 25.3145 6.26662 25.3145 6.26662L24.9629 7.19622C24.9629 7.19622 24.2288 7.10204 23.7919 7.9785C23.355 8.85496 24.3392 17.4442 24.3392 17.4442C24.3392 17.4442 21.4469 22.7275 21.4469 24.9206C21.4469 27.1136 22.4819 28.9515 22.4819 28.9515H21.0296C21.0296 28.9515 18.899 26.4086 18.462 25.1378C18.0251 23.8669 18.1998 22.596 18.1998 22.596C18.1998 22.596 15.8839 22.4646 13.8303 22.596C11.7767 22.7275 10.4072 24.498 10.16 25.4884C9.91287 26.4787 9.81048 28.9515 9.81048 28.9515H8.66211C7.96315 26.7882 7.40803 26.0129 7.70918 24.9206C8.54334 21.8949 8.37949 20.1788 8.18635 19.4145C7.99321 18.6501 6.68552 17.983 6.68552 17.983C7.32609 16.6741 7.97996 16.0452 10.7926 15.9796C13.6052 15.914 17.3915 15.5965 18.6466 14.5553Z"
    }), /* @__PURE__ */ React__default["default"].createElement("path", {
      d: "M11.1268 24.7939C11.1268 24.7939 11.4236 27.5481 13.0001 28.9516H14.3511C13.0001 27.4166 12.8527 23.4155 12.8527 23.4155C12.1656 23.6399 11.3045 24.3846 11.1268 24.7939Z"
    })), /* @__PURE__ */ React__default["default"].createElement("span", null, "Tina Admin")), /* @__PURE__ */ React__default["default"].createElement("svg", {
      width: "20",
      height: "20",
      viewBox: "0 0 20 20",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      className: `flex-0 inline-block opacity-50 group-hover:opacity-80 transition-all duration-300 ease-in-out transform ${open ? `rotate-90 opacity-100` : `rotate-0`}`
    }, /* @__PURE__ */ React__default["default"].createElement("g", {
      opacity: "0.3"
    }, /* @__PURE__ */ React__default["default"].createElement("path", {
      d: "M7.91675 13.8086L9.16675 15.0586L14.2253 10L9.16675 4.9414L7.91675 6.1914L11.7253 10L7.91675 13.8086Z",
      fill: "currentColor"
    })))), /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "transform translate-y-full absolute bottom-3 right-5 w-2/3 z-50"
    }, /* @__PURE__ */ React__default["default"].createElement(react.Transition, {
      enter: "transition duration-150 ease-out",
      enterFrom: "transform opacity-0 -translate-y-2",
      enterTo: "transform opacity-100 translate-y-0",
      leave: "transition duration-75 ease-in",
      leaveFrom: "transform opacity-100 translate-y-0",
      leaveTo: "transform opacity-0 -translate-y-2"
    }, /* @__PURE__ */ React__default["default"].createElement(react.Menu.Items, {
      className: "w-full py-1 bg-white border border-gray-150 rounded-lg shadow-lg"
    }, /* @__PURE__ */ React__default["default"].createElement(react.Menu.Item, null, ({ active }) => /* @__PURE__ */ React__default["default"].createElement("a", {
      className: `w-full text-lg px-4 py-2 tracking-wide flex items-center opacity-80 text-gray-600 ${active && "text-gray-800 opacity-100"}`,
      href: "/"
    }, /* @__PURE__ */ React__default["default"].createElement(VscOpenPreview, {
      className: "w-6 h-auto mr-1.5 text-blue-400"
    }), " ", "View Website")), /* @__PURE__ */ React__default["default"].createElement(react.Menu.Item, null, ({ active }) => /* @__PURE__ */ React__default["default"].createElement("button", {
      className: `w-full text-lg px-4 py-2 tracking-wide flex items-center opacity-80 text-gray-600 ${active && "text-gray-800 opacity-100"}`,
      onClick: () => logout()
    }, /* @__PURE__ */ React__default["default"].createElement(BiExit, {
      className: "w-6 h-auto mr-1.5 text-blue-400"
    }), " ", "Log out")))))))), /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "px-6 py-7 flex-1"
    }, /* @__PURE__ */ React__default["default"].createElement("h4", {
      className: "uppercase font-bold text-sm mb-3"
    }, "Collections"), /* @__PURE__ */ React__default["default"].createElement("ul", {
      className: "flex flex-col gap-4"
    }, collections.map((collection) => {
      return /* @__PURE__ */ React__default["default"].createElement("li", {
        key: `${collection.name}-link`
      }, /* @__PURE__ */ React__default["default"].createElement(reactRouterDom.NavLink, {
        className: `text-lg tracking-wide hover:text-blue-600 flex items-center opacity-90 hover:opacity-100`,
        activeClassName: "text-blue-600",
        to: `/admin/collections/${collection.name}`
      }, /* @__PURE__ */ React__default["default"].createElement(ImFilesEmpty, {
        className: "mr-2 h-6 opacity-80 w-auto"
      }), " ", collection.label));
    })))), /* @__PURE__ */ React__default["default"].createElement("div", {
      className: "flex-1"
    }, /* @__PURE__ */ React__default["default"].createElement(reactRouterDom.Switch, null, /* @__PURE__ */ React__default["default"].createElement(reactRouterDom.Route, {
      path: `/admin/collections/:collectionName/new`
    }, /* @__PURE__ */ React__default["default"].createElement(CollectionCreatePage, null)), /* @__PURE__ */ React__default["default"].createElement(reactRouterDom.Route, {
      path: `/admin/collections/:collectionName/:filename`
    }, /* @__PURE__ */ React__default["default"].createElement(CollectionUpdatePage, null)), /* @__PURE__ */ React__default["default"].createElement(reactRouterDom.Route, {
      path: `/admin/collections/:collectionName`
    }, /* @__PURE__ */ React__default["default"].createElement(CollectionListPage, null)), /* @__PURE__ */ React__default["default"].createElement(reactRouterDom.Route, {
      path: `/admin`
    }, /* @__PURE__ */ React__default["default"].createElement(DashboardPage, null)))))))));
  };
  exports2.AuthWallInner = AuthWallInner;
  exports2.Client = Client;
  exports2.DEFAULT_LOCAL_TINA_GQL_SERVER_URL = DEFAULT_LOCAL_TINA_GQL_SERVER_URL;
  exports2.LocalClient = LocalClient;
  exports2.TinaAdmin = TinaAdmin;
  exports2.TinaCMSProvider2 = TinaCMSProvider2;
  exports2.TinaCloudAuthWall = TinaCloudAuthWall;
  exports2.TinaCloudProvider = TinaCloudProvider;
  exports2.assertShape = assertShape;
  exports2.createClient = createClient;
  exports2["default"] = TinaCMSProvider2;
  exports2.getStaticPropsForTina = getStaticPropsForTina;
  exports2.gql = gql;
  exports2.safeAssertShape = safeAssertShape;
  exports2.staticRequest = staticRequest;
  exports2.useDocumentCreatorPlugin = useDocumentCreatorPlugin;
  exports2.useGraphqlForms = useGraphqlForms;
  exports2.useTinaAuthRedirect = useTinaAuthRedirect;
  Object.keys(toolkit).forEach(function(k) {
    if (k !== "default" && !exports2.hasOwnProperty(k))
      Object.defineProperty(exports2, k, {
        enumerable: true,
        get: function() {
          return toolkit[k];
        }
      });
  });
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2[Symbol.toStringTag] = "Module";
});
