var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React from "react";
const TinaMarkdown = ({
  content,
  components = {}
}) => {
  if (!content) {
    return null;
  }
  const nodes = Array.isArray(content) ? content : content.children;
  if (!nodes) {
    console.log(`Expected to find structured content for TinaMarkdown`);
    return null;
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, nodes.map((child) => {
    const _a = child, { children } = _a, props = __objRest(_a, ["children"]);
    switch (child.type) {
      case "h1":
      case "h2":
      case "h3":
      case "h4":
      case "h5":
      case "h6":
      case "p":
      case "blockquote":
      case "ol":
      case "ul":
      case "li":
        if (components[child.type]) {
          const Component2 = components[child.type];
          return /* @__PURE__ */ React.createElement(Component2, __spreadProps(__spreadValues({}, props), {
            childrenRaw: children
          }), /* @__PURE__ */ React.createElement(TinaMarkdown, {
            components,
            content: children
          }));
        }
        return React.createElement(child.type, {
          children: /* @__PURE__ */ React.createElement(TinaMarkdown, {
            components,
            content: children
          })
        });
      case "lic":
        return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(TinaMarkdown, {
          components,
          content: child.children
        }));
      case "img":
        if (components[child.type]) {
          const Component2 = components[child.type];
          return /* @__PURE__ */ React.createElement(Component2, __spreadValues({}, props));
        }
        return /* @__PURE__ */ React.createElement("img", {
          src: child.url,
          alt: child.caption
        });
      case "a":
        if (components[child.type]) {
          const Component2 = components[child.type];
          return /* @__PURE__ */ React.createElement(Component2, __spreadValues({}, props), /* @__PURE__ */ React.createElement(TinaMarkdown, {
            components,
            content: children
          }));
        }
        return /* @__PURE__ */ React.createElement("a", {
          href: child.url
        }, /* @__PURE__ */ React.createElement(TinaMarkdown, {
          components,
          content: children
        }));
      case "code_block":
        const value = child.children.map((item) => {
          return item.children[0].text;
        }).join("\n");
        if (components[child.type]) {
          const Component2 = components[child.type];
          return /* @__PURE__ */ React.createElement(Component2, __spreadProps(__spreadValues({}, props), {
            childrenRaw: children
          }), value);
        }
        return /* @__PURE__ */ React.createElement("pre", null, /* @__PURE__ */ React.createElement("code", null, value));
      case "hr":
        if (components[child.type]) {
          const Component2 = components[child.type];
          return /* @__PURE__ */ React.createElement(Component2, __spreadValues({}, props));
        }
        return /* @__PURE__ */ React.createElement("hr", null);
      case "text":
        return /* @__PURE__ */ React.createElement(Leaf, __spreadValues({
          components
        }, child));
      case "mdxJsxTextElement":
      case "mdxJsxFlowElement":
        const Component = components[child.name];
        if (Component) {
          const props2 = child.props ? child.props : {};
          return /* @__PURE__ */ React.createElement(Component, __spreadValues({}, props2));
        } else {
          const ComponentMissing = components["component_missing"];
          if (ComponentMissing) {
            return /* @__PURE__ */ React.createElement(ComponentMissing, {
              name: child.name
            });
          } else {
            throw new Error(`No component provided for ${child.name}`);
          }
        }
      default:
        if (typeof child.text === "string") {
          return /* @__PURE__ */ React.createElement(Leaf, __spreadValues({
            components
          }, child));
        }
        console.log(`No tina renderer for ${child.type}`, child);
    }
  }));
};
const Leaf = (props) => {
  if (props.bold) {
    const _a = props, { bold } = _a, rest = __objRest(_a, ["bold"]);
    if (props.components.bold) {
      const Component = props.components.bold;
      return /* @__PURE__ */ React.createElement(Component, null, /* @__PURE__ */ React.createElement(Leaf, __spreadValues({}, rest)));
    }
    return /* @__PURE__ */ React.createElement("strong", null, /* @__PURE__ */ React.createElement(Leaf, __spreadValues({}, rest)));
  }
  if (props.italic) {
    const _b = props, { italic } = _b, rest = __objRest(_b, ["italic"]);
    if (props.components.italic) {
      const Component = props.components.italic;
      return /* @__PURE__ */ React.createElement(Component, null, /* @__PURE__ */ React.createElement(Leaf, __spreadValues({}, rest)));
    }
    return /* @__PURE__ */ React.createElement("em", null, /* @__PURE__ */ React.createElement(Leaf, __spreadValues({}, rest)));
  }
  if (props.underline) {
    const _c = props, { underline } = _c, rest = __objRest(_c, ["underline"]);
    if (props.components.underline) {
      const Component = props.components.underline;
      return /* @__PURE__ */ React.createElement(Component, null, /* @__PURE__ */ React.createElement(Leaf, __spreadValues({}, rest)));
    }
    return /* @__PURE__ */ React.createElement("u", null, /* @__PURE__ */ React.createElement(Leaf, __spreadValues({}, rest)));
  }
  if (props.strikethrough) {
    const _d = props, { strikethrough } = _d, rest = __objRest(_d, ["strikethrough"]);
    if (props.components.strikethrough) {
      const Component = props.components.strikethrough;
      return /* @__PURE__ */ React.createElement(Component, null, /* @__PURE__ */ React.createElement(Leaf, __spreadValues({}, rest)));
    }
    return /* @__PURE__ */ React.createElement("s", null, /* @__PURE__ */ React.createElement(Leaf, __spreadValues({}, rest)));
  }
  if (props.code) {
    const _e = props, { code } = _e, rest = __objRest(_e, ["code"]);
    if (props.components.code) {
      const Component = props.components.code;
      return /* @__PURE__ */ React.createElement(Component, null, /* @__PURE__ */ React.createElement(Leaf, __spreadValues({}, rest)));
    }
    return /* @__PURE__ */ React.createElement("code", null, /* @__PURE__ */ React.createElement(Leaf, __spreadValues({}, rest)));
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, props.text);
};
export { TinaMarkdown };
