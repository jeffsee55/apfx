/**
Copyright 2021 Forestry.io Holdings, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
import { TokenObject } from '../auth/authenticate';
import { DocumentNode, GraphQLSchema } from 'graphql';
import gql from 'graphql-tag';
import { EventBus, BranchData } from '@tinacms/toolkit';
export declare type TinaIOConfig = {
    frontendUrlOverride?: string;
    identityApiUrlOverride?: string;
    contentApiUrlOverride?: string;
};
interface ServerOptions {
    clientId: string;
    branch: string;
    customContentApiUrl?: string;
    getTokenFn?: () => TokenObject;
    tinaioConfig?: TinaIOConfig;
    tokenStorage?: 'MEMORY' | 'LOCAL_STORAGE' | 'CUSTOM';
}
export declare class Client {
    frontendUrl: string;
    contentApiUrl: string;
    identityApiUrl: string;
    schema: GraphQLSchema;
    clientId: string;
    query: string;
    setToken: (_token: TokenObject) => void;
    private getToken;
    private token;
    private branch;
    private options;
    events: EventBus;
    constructor({ tokenStorage, ...options }: ServerOptions);
    setBranch(branchName: string): void;
    addPendingContent: (props: any) => Promise<unknown>;
    getSchema: () => Promise<GraphQLSchema>;
    requestWithForm<ReturnType>(query: (gqlTag: typeof gql) => DocumentNode, { variables }: {
        variables: any;
    }): Promise<ReturnType>;
    request<ReturnType>(query: ((gqlTag: typeof gql) => DocumentNode) | string, { variables }: {
        variables: object;
    }): Promise<ReturnType>;
    isAuthorized(): Promise<boolean>;
    isAuthenticated(): Promise<boolean>;
    authenticate(): Promise<TokenObject>;
    /**
     * Wraps the normal fetch function with same API but adds the authorization header token.
     *
     * @example
     * const test = await tinaCloudClient.fetchWithToken(`/mycustomAPI/thing/one`) // the token will be passed in the authorization header
     *
     * @param input fetch function input
     * @param init fetch function init
     */
    fetchWithToken(input: RequestInfo, init?: RequestInit): Promise<Response>;
    getUser(): Promise<any>;
    listBranches({ owner, repo }: BranchData): Promise<string>;
    createBranch({ owner, repo, baseBranch, branchName }: BranchData): Promise<string>;
}
export declare const DEFAULT_LOCAL_TINA_GQL_SERVER_URL = "http://localhost:4001/graphql";
export declare class LocalClient extends Client {
    constructor(props?: {
        customContentApiUrl?: string;
    });
    isAuthorized(): Promise<boolean>;
    isAuthenticated(): Promise<boolean>;
}
export {};
